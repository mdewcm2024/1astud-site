var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲:  https://github.com/mdewcm2024/1astud-site \n 網站:  https://mdewcm2024.github.io/1astud-site \n 討論區:  https://github.com/mdewcm2024/1astud-site/discussions \n 所有學員只要透過 Github Classroom 加入 site Team, 就擁有管理此倉儲與網站的權限. \n', 'tags': '', 'url': 'About.html'}, {'title': '專案', 'text': 'W10 各用戶可以利用 Replit 維護分組倉儲內容. \n 列出修課學員的倉儲與網站連結 \n 已知可以從\xa0 https://mdewcm2024.github.io/1astud-site/downloads/1a.txt \xa0取得學員的學號與帳號資料，使用 Brython 可以設法利用 Python 語法對此資料進行處理。 \n 第一步，先取得資料，然後將每一行內容隔開後，放入數列備用。 \n 若將下列 Brython 程式碼放入 Gist，然後利用網站的\xa0 Brython 頁面，以 src 作為資料網誌的內容，就可以直接在網站上 執行第一步程式 。 \n from browser import window, ajax\n \ndef fetch_csv_data():\n  # CSV 檔案網址\n  url = "https://mdewcm2024.github.io/1astud-site/downloads/1a.txt"\n \n  def on_complete(req):\n    if req.status == 200 or req.status == 0:\n      # 讀取 CSV 檔案內容\n      content = req.text\n \n      # 依照換行符號拆分資料\n      lines = content.split(\'\\n\')\n \n      # 建立空列表儲存資料\n      data = []\n \n      # 遍歷每一行資料\n      for line in lines:\n        # 忽略空白行\n        if line.strip() == "":\n          continue\n \n        # 依照逗號拆分資料\n        items = line.split(\',\')\n \n        # 將拆分後的資料加入列表\n        data.append(items)\n \n      # 印出結果\n      print(data)\n    else:\n      print("Error:", req.text)\n \n  # 發送 AJAX 請求\n  req = ajax.ajax()\n  req.bind(\'complete\', on_complete)\n  req.open(\'GET\', url, True)\n  req.set_header(\'content-type\', \'application/x-www-form-urlencoded\')\n  req.send()\n \n# 呼叫函式讀取 CSV 資料\nfetch_csv_data() \n \n', 'tags': '', 'url': '專案.html'}, {'title': 'g1', 'text': '心得 \n 41223120: \n 41223121: \n 41223126: \n 41223136: \n <<<<<<< HEAD \n 41223153:一個網頁並非一個人能獨自完成，在遇到問題時可以跟組員互相討論、交流，並將交流過後的成果和解決方法，上傳在自己的網頁中，組員或自己再遇到類似問題時，可以用來參考，遇到更加艱難的問題時，適時地尋求ChatGPT的幫助，來解決網頁、指令、程式上的問題，最後再集結大家所學，共同創造以及維護，屬於自己組別的網頁，並在網頁上，更新老師給予的專題與題目，解決過程。 \n', 'tags': '', 'url': 'g1.html'}, {'title': 'g2', 'text': '41223104：這門課程其實上學期也有修過一次，但感覺這次的課程內容有稍微不同，但大致上一樣，透過上學期的經驗，在操作及編輯網頁來說顯得更容易了。還記得上學期因為在摸索課程內容，所以學得相當困難、不容易，但多虧有上學期的學習磨練，這學期得以快速掌握課程核心，完成課堂的許多作業。我也漸漸在想，為甚麼要讓我們每次完成課程功課在編輯網頁後都要將自己編輯了甚麼上傳到Replit？我想可能是因為社會上的各個公司都需要利用網頁來介紹自己的公司達到行銷效果，所以公司內部會有網頁編輯員，當他們編輯好網頁時，需要上傳自己編輯的內容，給公司的高管看並且檢查。假如有網頁上的錯誤，修改網頁時，公司裡的網頁工程師也能快速知道錯誤出現在哪裡，然後修正錯誤吧。 \n', 'tags': '', 'url': 'g2.html'}, {'title': 'g4', 'text': '>>>>>>> 1a0a4c8eecc33ba2d60f812eb8a348e56522b13e \n', 'tags': '', 'url': 'g4.html'}, {'title': 'g5', 'text': '心得 \n 41223101: 這堂課教會我如何善用github和C語言，這兩個都是可以運用各種不同的方式去完成自己的設計，幾周下來也理解github的歷史和創作人的設計理念，雖然都是由ChatGPT ， 回答但也因此熟悉了一點 ，需要團隊合作的部分偏難一點，希望之後遇到的都可以在ChatGPT上解決 。\xa0 \n 41223106: 從下學期開始以團隊分組方式進行，所以我學到很多關於組別網站的一些知識，例如:如何將組員個人倉儲加入團隊倉儲的子模組、 在 replit 自設 .ssh 維護分組倉儲、在 Replit Codespaces 與 Gitpod 執行倉儲的動態與靜態網站、及在replit上設定分組權限，以上。 \n', 'tags': '', 'url': 'g5.html'}, {'title': 'g7', 'text': '', 'tags': '', 'url': 'g7.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};